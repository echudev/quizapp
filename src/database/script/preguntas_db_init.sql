.mode columns

BEGIN TRANSACTION;

CREATE TABLE Niveles (
    id INTEGER PRIMARY KEY NOT NULL,
    nombre VARCHAR(20) NOT NULL,
    puntaje INTEGER NOT NULL
);


CREATE TABLE Preguntas (
    id INTEGER PRIMARY KEY NOT NULL,
    enunciado TEXT NOT NULL,
    nivel_id TEXT NOT NULL ,
    FOREIGN KEY (nivel_id) REFERENCES Nivel(id)
);

CREATE TABLE Respuestas (
    id INTEGER PRIMARY KEY NOT NULL,
    texto TEXT NOT NULL, 
    correcta INTEGER NOT NULL,
    pregunta_id TEXT NOT NULL,
    FOREIGN KEY (pregunta_id) REFERENCES Pregunta(id)
);

INSERT INTO Niveles (id, nombre, puntaje) VALUES
    (1, 'Facil', 10),
    (2, 'Medio', 20),
    (3, 'Dificil', 30),
    (4, 'Experto', 40);

INSERT INTO Preguntas (id, enunciado, nivel_id) VALUES
    (1, '¿Cuál es la función para imprimir en Python?', 1),
    (2, '¿Cómo se define una lista en Python?', 1),
    (3, '¿Qué operador se usa para sumar en Python?', 1),
    (4, '¿Cómo se indica un comentario en Python?', 1),
    (5, '¿Cómo se obtiene el largo de una lista en Python?', 1),
    (6, '¿Qué palabra clave se usa para definir una función en Python?', 1),
    (7, '¿Cómo se asigna un valor a una variable en Python?', 1),
    (8, '¿Qué tipo de dato es "True" en Python?', 1),
    (9, '¿Qué función se usa para convertir un entero a cadena en Python?', 1),
    (10, '¿Qué símbolo se usa para la división en Python?', 1),
    (11, '¿Qué función se usa para leer datos del usuario en Python?', 1),
    (12, '¿Cómo se concatena cadenas en Python?', 1),
    (13, '¿Qué palabra clave se usa para iniciar un bucle en Python?', 1),
    (14, '¿Cómo se escribe una condición en Python?', 1),
    (15, '¿Qué palabra clave se usa para importar una biblioteca en Python?', 1),
    (16, '¿Qué función se usa para redondear un número en Python?', 1),
    (17, '¿Cómo se obtiene el valor absoluto de un número en Python?', 1),
    (18, '¿Qué función se usa para encontrar el valor mínimo en una lista en Python?', 1),
    (19, '¿Qué función se usa para encontrar el valor máximo en una lista en Python?', 1),
    (20, '¿Cómo se crea un conjunto en Python?', 1),
    (21, '¿Qué operador se usa para la multiplicación en Python?', 1),
    (22, '¿Cómo se agrega un elemento a una lista en Python?', 1),
    (23, '¿Cómo se elimina un elemento de una lista en Python?', 1),
    (24, '¿Qué función se usa para ordenar una lista en Python?', 1),
    (25, '¿Qué palabra clave se usa para definir una clase en Python?', 1),
    (26, '¿Cómo se obtiene el tipo de una variable en Python?', 1),
    (27, '¿Qué operador se usa para la resta en Python?', 1),
    (28, '¿Cómo se convierte una cadena a entero en Python?', 1),
    (29, '¿Qué operador se usa para la comparación de igualdad en Python?', 1),
    (30, '¿Cómo se obtiene el módulo de una división en Python?', 1);

INSERT INTO Preguntas (id, enunciado, nivel_id) VALUES
    (31, '¿Qué es una tupla en Python?', 2),
    (32, '¿Cómo se crea un diccionario en Python?', 2),
    (33, '¿Cómo se define una función anónima en Python?', 2),
    (34, '¿Qué método se usa para agregar un elemento al final de una lista en Python?', 2),
    (35, '¿Cómo se convierte una cadena en un entero en Python?', 2),
    (36, '¿Qué palabra clave se usa para definir una clase en Python?', 2),
    (37, '¿Cómo se accede a un valor en un diccionario en Python?', 2),
    (38, '¿Qué método se usa para unir elementos de una lista en una cadena en Python?', 2),
    (39, '¿Cómo se invierte una lista en Python?', 2),
    (40, '¿Qué método se usa para obtener una subcadena en Python?', 2),
    (41, '¿Qué función se usa para obtener el tipo de una variable en Python?', 2),
    (42, '¿Cómo se eliminan espacios en blanco al inicio y final de una cadena en Python?', 2),
    (43, '¿Qué método se usa para ordenar una lista en Python?', 2),
    (44, '¿Qué palabra clave se usa para salir de un bucle en Python?', 2),
    (45, '¿Cómo se comprueba si un valor está en una lista en Python?', 2),
    (46, '¿Qué método se usa para copiar una lista en Python?', 2),
    (47, '¿Cómo se crean listas anidadas en Python?', 2),
    (48, '¿Qué es una comprensión de listas en Python?', 2),
    (49, '¿Cómo se maneja una excepción en Python?', 2),
    (50, '¿Cómo se usa el operador ternario en Python?', 2),
    (51, '¿Cómo se generan números aleatorios en Python?', 2),
    (52, '¿Cómo se obtiene la longitud de una cadena en Python?', 2),
    (53, '¿Qué método se usa para encontrar el índice de un elemento en una lista en Python?', 2),
    (54, '¿Cómo se usa la función zip() en Python?', 2),
    (55, '¿Cómo se define un diccionario con valores por defecto en Python?', 2),
    (56, '¿Qué método se usa para actualizar un diccionario en Python?', 2),
    (57, '¿Qué función se usa para obtener una lista de claves de un diccionario en Python?', 2),
    (58, '¿Cómo se elimina un par clave-valor de un diccionario en Python?', 2),
    (59, '¿Qué método se usa para combinar dos diccionarios en Python?', 2),
    (60, '¿Cómo se comprueba si una clave está en un diccionario en Python?', 2);

INSERT INTO Preguntas (id, enunciado, nivel_id) VALUES
    (61, '¿Qué es una comprensión de listas en Python?', 3),
    (62, '¿Cómo se maneja una excepción en Python?', 3),
    (63, '¿Qué es un generador en Python?', 3),
    (64, '¿Cómo se define una propiedad en una clase en Python?', 3),
    (65, '¿Qué es un decorador en Python?', 3),
    (66, '¿Cómo se serializa un objeto a JSON en Python?', 3),
    (67, '¿Qué es un módulo en Python?', 3),
    (68, '¿Cómo se define una función recursiva en Python?', 3),
    (69, '¿Qué es el manejo de contexto en Python?', 3),
    (70, '¿Qué es un iterador en Python?', 3),
    (71, '¿Cómo se usa la función map() en Python?', 3),
    (72, '¿Cómo se usa la función filter() en Python?', 3),
    (73, '¿Cómo se define una función lambda con múltiples parámetros en Python?', 3),
    (74, '¿Qué es un namespace en Python?', 3),
    (75, '¿Cómo se define una clase abstracta en Python?', 3),
    (76, '¿Cómo se usa el módulo itertools en Python?', 3),
    (77, '¿Cómo se define un método estático en Python?', 3),
    (78, '¿Qué es una metaclase en Python?', 3),
    (79, '¿Cómo se implementa la herencia múltiple en Python?', 3),
    (80, '¿Qué es un método de clase en Python?', 3),
    (81, '¿Cómo se usa la biblioteca logging en Python?', 3),
    (82, '¿Cómo se usa la función any() en Python?', 3),
    (83, '¿Cómo se usa la función all() en Python?', 3),
    (84, '¿Cómo se define una función que toma argumentos variables en Python?', 3),
    (85, '¿Cómo se usa la biblioteca datetime en Python?', 3),
    (86, '¿Qué es el duck typing en Python?', 3),
    (87, '¿Qué es el monkey patching en Python?', 3),
    (88, '¿Cómo se usa la biblioteca unittest en Python?', 3),
    (89, '¿Qué es el patrón singleton en Python?', 3),
    (90, '¿Qué es el GIL     (Global Interpreter Lock) en Python?', 3);

INSERT INTO Preguntas (id, enunciado, nivel_id) VALUES
    (91, '¿Cómo se utiliza una clase en Python?', 4),
    (92, '¿Qué es un decorador en Python?', 4),
    (93, '¿Cómo se implementa un metaclase en Python?', 4),
    (94, '¿Qué es el duck typing en Python?', 4),
    (95, '¿Cómo se usa el patrón singleton en Python?', 4),
    (96, '¿Qué es el GIL (Global Interpreter Lock) en Python?', 4),
    (97, '¿Cómo se implementa un patrón de diseño en Python?', 4),
    (98, '¿Qué es un generador en Python?', 4),
    (99, '¿Cómo se utiliza la concurrencia en Python?', 4),
    (100, '¿Cómo se implementa una API en Python?', 4),
    (101, '¿Qué es la serialización en Python?', 4),
    (102, '¿Cómo se manejan las excepciones en Python?', 4),
    (103, '¿Qué es una expresión lambda en Python?', 4),
    (104, '¿Cómo se utiliza una lista por comprensión en Python?', 4),
    (105, '¿Qué es una función de orden superior en Python?', 4),
    (106, '¿Cómo se implementa un patrón de diseño singleton en Python?', 4),
    (107, '¿Cómo se usa la biblioteca functools en Python?', 4),
    (108, '¿Qué es el memoization en Python?', 4),
    (109, '¿Cómo se maneja la memoria en Python?', 4),
    (110, '¿Qué es el monkey patching en Python?', 4),
    (111, '¿Cómo se utiliza la biblioteca asyncio en Python?', 4),
    (112, '¿Qué es la metaprogramación en Python?', 4),
    (113, '¿Cómo se implementa un contexto en Python?', 4),
    (114, '¿Qué es una función generadora en Python?', 4),
    (115, '¿Cómo se utiliza la biblioteca threading en Python?', 4),
    (116, '¿Qué es el multiprocessing en Python?', 4),
    (117, '¿Cómo se implementa una clase abstracta en Python?', 4),
    (118, '¿Qué es el pickling en Python?', 4),
    (119, '¿Cómo se maneja la serialización en Python?', 4),
    (120, '¿Cómo se implementa un protocolo en Python?', 4);

INSERT INTO Respuestas (id, texto, correcta, pregunta_id) VALUES
    (1, 'print()', 1, 1),
    (2, 'echo()', 0, 1),
    (3, 'printf()', 0, 1),
    (4, 'println()', 0, 1),
    (5, '[1, 2, 3]', 1, 2),
    (6, '{1, 2, 3}', 0, 2),
    (7, '(1, 2, 3)', 0, 2),
    (8, '<1, 2, 3>', 0, 2),
    (9, '+', 1, 3),
    (10, '-', 0, 3),
    (11, '*', 0, 3),
    (12, '/', 0, 3),
    (13, '#', 1, 4),
    (14, '//', 0, 4),
    (15, '/*', 0, 4),
    (16, '!', 0, 4),
    (17, 'len()', 1, 5),
    (18, 'length()', 0, 5),
    (19, 'count()', 0, 5),
    (20, 'size()', 0, 5),
    (21, 'def', 1, 6),
    (22, 'function', 0, 6),
    (23, 'fn', 0, 6),
    (24, 'func', 0, 6),
    (25, '=', 1, 7),
    (26, ':', 0, 7),
    (27, '==', 0, 7),
    (28, '->', 0, 7),
    (29, 'Boolean', 1, 8),
    (30, 'String', 0, 8),
    (31, 'Integer', 0, 8),
    (32, 'Float', 0, 8),
    (33, 'str()', 1, 9),
    (34, 'int()', 0, 9),
    (35, 'float()', 0, 9),
    (36, 'bool()', 0, 9),
    (37, '/', 1, 10),
    (38, '*', 0, 10),
    (39, '-', 0, 10),
    (40, '+', 0, 10),
    (41, 'input()', 1, 11),
    (42, 'read()', 0, 11),
    (43, 'scan()', 0, 11),
    (44, 'gets()', 0, 11),
    (45, '+', 1, 12),
    (46, '&', 0, 12),
    (47, 'concat', 0, 12),
    (48, 'join', 0, 12),
    (49, 'for', 1, 13),
    (50, 'while', 0, 13),
    (51, 'do', 0, 13),
    (52, 'foreach', 0, 13),
    (53, 'if', 1, 14),
    (54, 'when', 0, 14),
    (55, 'case', 0, 14),
    (56, 'switch', 0, 14),
    (57, 'import', 1, 15),
    (58, 'include', 0, 15),
    (59, 'require', 0, 15),
    (60, 'using', 0, 15),
    (61, 'round()', 1, 16),
    (62, 'ceil()', 0, 16),
    (63, 'floor()', 0, 16),
    (64, 'truncate()', 0, 16),
    (65, 'abs()', 1, 17),
    (66, 'absolute()', 0, 17),
    (67, 'fabs()', 0, 17),
    (68, 'positive()', 0, 17),
    (69, 'min()', 1, 18),
    (70, 'minimum()', 0, 18),
    (71, 'least()', 0, 18),
    (72, 'smallest()', 0, 18),
    (73, 'max()', 1, 19),
    (74, 'maximum()', 0, 19),
    (75, 'greatest()', 0, 19),
    (76, 'largest()', 0, 19),
    (77, 'set()', 1, 20),
    (78, 'list()', 0, 20),
    (79, 'tuple()', 0, 20),
    (80, 'dict()', 0, 20),
    (81, '*', 1, 21),
    (82, 'x', 0, 21),
    (83, '.', 0, 21),
    (84, '/', 0, 21),
    (85, 'append()', 1, 22),
    (86, 'add()', 0, 22),
    (87, 'insert()', 0, 22),
    (88, 'extend()', 0, 22),
    (89, 'remove()', 1, 23),
    (90, 'delete()', 0, 23),
    (91, 'pop()', 0, 23),
    (92, 'discard()', 0, 23),
    (93, 'sort()', 1, 24),
    (94, 'order()', 0, 24),
    (95, 'arrange()', 0, 24),
    (96, 'sequence()', 0, 24),
    (97, 'class', 1, 25),
    (98, 'object', 0, 25),
    (99, 'type', 0, 25),
    (100, 'category', 0, 25),
    (101, 'type()', 1, 26),
    (102, 'class()', 0, 26),
    (103, 'kind()', 0, 26),
    (104, 'form()', 0, 26),
    (105, '-', 1, 27),
    (106, '/', 0, 27),
    (107, '+', 0, 27),
    (108, '*', 0, 27),
    (109, 'int()', 1, 28),
    (110, 'str()', 0, 28),
    (111, 'float()', 0, 28),
    (112, 'bool()', 0, 28),
    (113, '==', 1, 29),
    (114, '=', 0, 29),
    (115, '!=', 0, 29),
    (116, '<>', 0, 29),
    (117, '%', 1, 30),
    (118, '/', 0, 30),
    (119, '*', 0, 30),
    (120, '-', 0, 30);

INSERT INTO Respuestas (id, texto, correcta, pregunta_id) VALUES
    (121, 'Una colección ordenada e inmutable', 1, 31),
    (122, 'Una colección desordenada y mutable', 0, 31),
    (123, 'Una colección ordenada y mutable', 0, 31),
    (124, 'Una colección desordenada e inmutable', 0, 31),
    (125, '{"clave": "valor"}', 1, 32),
    (126, '["clave", "valor"]', 0, 32),
    (127, '("clave", "valor")', 0, 32),
    (128, '{"clave", "valor"}', 0, 32),
    (129, 'lambda', 1, 33),
    (130, 'func', 0, 33),
    (131, 'def', 0, 33),
    (132, 'anon', 0, 33),
    (133, 'append()', 1, 34),
    (134, 'insert()', 0, 34),
    (135, 'extend()', 0, 34),
    (136, 'add()', 0, 34),
    (137, 'int()', 1, 35),
    (138, 'str()', 0, 35),
    (139, 'float()', 0, 35),
    (140, 'bool()', 0, 35),
    (141, 'class', 1, 36),
    (142, 'object', 0, 36),
    (143, 'type', 0, 36),
    (144, 'module', 0, 36),
    (145, 'diccionario[clave]', 1, 37),
    (146, 'diccionario.clave', 0, 37),
    (147, 'diccionario(clave)', 0, 37),
    (148, 'diccionario{clave}', 0, 37),
    (149, 'join()', 1, 38),
    (150, 'concatenate()', 0, 38),
    (151, 'combine()', 0, 38),
    (152, 'merge()', 0, 38),
    (153, 'reverse()', 1, 39),
    (154, 'invert()', 0, 39),
    (155, 'flip()', 0, 39),
    (156, 'backwards()', 0, 39),
    (157, 'slice()', 1, 40),
    (158, 'sub()', 0, 40),
    (159, 'segment()', 0, 40),
    (160, 'part()', 0, 40),
    (161, 'len()', 1, 41),
    (162, 'length()', 0, 41),
    (163, 'size()', 0, 41),
    (164, 'count()', 0, 41),
    (165, 'add()', 1, 42),
    (166, 'push()', 0, 42),
    (167, 'insert()', 0, 42),
    (168, 'include()', 0, 42),
    (169, 'del', 1, 43),
    (170, 'remove', 0, 43),
    (171, 'delete', 0, 43),
    (172, 'discard', 0, 43),
    (173, 'self', 1, 44),
    (174, 'this', 0, 44),
    (175, 'current', 0, 44),
    (176, 'me', 0, 44),
    (177, 'False', 1, 45),
    (178, 'None', 0, 45),
    (179, '0', 0, 45),
    (180, 'Null', 0, 45),
    (181, 'enumerate()', 1, 46),
    (182, 'count()', 0, 46),
    (183, 'list()', 0, 46),
    (184, 'index()', 0, 46),
    (185, 'zip()', 1, 47),
    (186, 'pair()', 0, 47),
    (187, 'match()', 0, 47),
    (188, 'combine()', 0, 47),
    (189, 'max()', 1, 48),
    (190, 'largest()', 0, 48),
    (191, 'biggest()', 0, 48),
    (192, 'greatest()', 0, 48),
    (193, 'input()', 1, 49),
    (194, 'scan()', 0, 49),
    (195, 'read()', 0, 49),
    (196, 'fetch()', 0, 49),
    (197, 'try', 1, 50),
    (198, 'attempt', 0, 50),
    (199, 'catch', 0, 50),
    (200, 'attempt', 0, 50),
    (201, 'finally', 1, 51),
    (202, 'finish', 0, 51),
    (203, 'end', 0, 51),
    (204, 'conclude', 0, 51),
    (205, 'OOP', 1, 52),
    (206, 'FP', 0, 52),
    (207, 'PP', 0, 52),
    (208, 'RP', 0, 52),
    (209, 'List', 1, 53),
    (210, 'Array', 0, 53),
    (211, 'Tuple', 0, 53),
    (212, 'Dictionary', 0, 53),
    (213, 'pass', 1, 54),
    (214, 'skip', 0, 54),
    (215, 'ignore', 0, 54),
    (216, 'continue', 0, 54),
    (217, 'yield', 1, 55),
    (218, 'return', 0, 55),
    (219, 'pass', 0, 55),
    (220, 'give', 0, 55),
    (221, 'for', 1, 56),
    (222, 'while', 0, 56),
    (223, 'until', 0, 56),
    (224, 'loop', 0, 56),
    (225, 'import', 1, 57),
    (226, 'include', 0, 57),
    (227, 'load', 0, 57),
    (228, 'use', 0, 57),
    (229, 'assert', 1, 58),
    (230, 'verify', 0, 58),
    (231, 'check', 0, 58),
    (232, 'validate', 0, 58),
    (233, 'yield', 1, 59),
    (234, 'return', 0, 59),
    (235, 'pass', 0, 59),
    (236, 'give', 0, 59),
    (237, 'def', 1, 60),
    (238, 'define', 0, 60),
    (239, 'fn', 0, 60),
    (240, 'func', 0, 60);

INSERT INTO Respuestas     (id, texto, correcta, pregunta_id) VALUES
    (241, 'import math', 1, 61),
    (242, 'include math', 0, 61),
    (243, 'load math', 0, 61),
    (244, 'use math', 0, 61),
    (245, 'strip()', 1, 62),
    (246, 'trim()', 0, 62),
    (247, 'cut()', 0, 62),
    (248, 'remove()', 0, 62),
    (249, 're.search()', 1, 63),
    (250, 're.find()', 0, 63),
    (251, 're.scan()', 0, 63),
    (252, 're.lookup()', 0, 63),
    (253, 'sys.exit()', 1, 64),
    (254, 'os.exit()', 0, 64),
    (255, 'exit()', 0, 64),
    (256, 'quit()', 0, 64),
    (257, 'len()', 1, 65),
    (258, 'length()', 0, 65),
    (259, 'size()', 0, 65),
    (260, 'count()', 0, 65),
    (261, 'def', 1, 66),
    (262, 'function', 0, 66),
    (263, 'fn', 0, 66),
    (264, 'func', 0, 66),
    (265, 'global', 1, 67),
    (266, 'public', 0, 67),
    (267, 'shared', 0, 67),
    (268, 'common', 0, 67),
    (269, 'finally', 1, 68),
    (270, 'end', 0, 68),
    (271, 'finish', 0, 68),
    (272, 'conclude', 0, 68),
    (273, 'raise', 1, 69),
    (274, 'throw', 0, 69),
    (275, 'error', 0, 69),
    (276, 'catch', 0, 69),
    (277, 'from', 1, 70),
    (278, 'include', 0, 70),
    (279, 'require', 0, 70),
    (280, 'using', 0, 70),
    (281, 'assert', 1, 71),
    (282, 'verify', 0, 71),
    (283, 'check', 0, 71),
    (284, 'validate', 0, 71),
    (285, 're.match()', 1, 72),
    (286, 're.search()', 0, 72),
    (287, 're.find()', 0, 72),
    (288, 're.scan()', 0, 72),
    (289, 'global', 1, 73),
    (290, 'public', 0, 73),
    (291, 'shared', 0, 73),
    (292, 'common', 0, 73),
    (293, 'yield', 1, 74),
    (294, 'return', 0, 74),
    (295, 'pass', 0, 74),
    (296, 'give', 0, 74),
    (297, 'len()', 1, 75),
    (298, 'length()', 0, 75),
    (299, 'size()', 0, 75),
    (300, 'count()', 0, 75),
    (301, 'import', 1, 76),
    (302, 'include', 0, 76),
    (303, 'load', 0, 76),
    (304, 'use', 0, 76),
    (305, 'strip()', 1, 77),
    (306, 'trim()', 0, 77),
    (307, 'cut()', 0, 77),
    (308, 'remove()', 0, 77),
    (309, 're.search()', 1, 78),
    (310, 're.find()', 0, 78),
    (311, 're.scan()', 0, 78),
    (312, 're.lookup()', 0, 78),
    (313, 'sys.exit()', 1, 79),
    (314, 'os.exit()', 0, 79),
    (315, 'exit()', 0, 79),
    (316, 'quit()', 0, 79),
    (317, 'from', 1, 80),
    (318, 'include', 0, 80),
    (319, 'require', 0, 80),
    (320, 'using', 0, 80),
    (321, 'yield', 1, 81),
    (322, 'return', 0, 81),
    (323, 'pass', 0, 81),
    (324, 'give', 0, 81),
    (325, 'def', 1, 82),
    (326, 'function', 0, 82),
    (327, 'fn', 0, 82),
    (328, 'func', 0, 82),
    (329, 'raise', 1, 83),
    (330, 'throw', 0, 83),
    (331, 'error', 0, 83),
    (332, 'catch', 0, 83),
    (333, 'assert', 1, 84),
    (334, 'verify', 0, 84),
    (335, 'check', 0, 84),
    (336, 'validate', 0, 84),
    (337, 'sys.exit()', 1, 85),
    (338, 'os.exit()', 0, 85),
    (339, 'exit()', 0, 85),
    (340, 'quit()', 0, 85),
    (341, 'try', 1, 86),
    (342, 'attempt', 0, 86),
    (343, 'catch', 0, 86),
    (344, 'attempt', 0, 86),
    (345, 'raise', 1, 87),
    (346, 'throw', 0, 87),
    (347, 'error', 0, 87),
    (348, 'catch', 0, 87),
    (349, 'yield', 1, 88),
    (350, 'return', 0, 88),
    (351, 'pass', 0, 88),
    (352, 'give', 0, 88),
    (353, 'global', 1, 89),
    (354, 'public', 0, 89),
    (355, 'shared', 0, 89),
    (356, 'common', 0, 89),
    (357, 'finally', 1, 90),
    (358, 'end', 0, 90),
    (359, 'finish', 0, 90),
    (360, 'conclude', 0, 90);


COMMIT;
