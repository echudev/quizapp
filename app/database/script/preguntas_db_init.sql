.mode columns

BEGIN TRANSACTION;

CREATE TABLE Niveles (
    id INTEGER PRIMARY KEY NOT NULL,
    nombre VARCHAR(20) NOT NULL,
    puntaje INTEGER NOT NULL
);


CREATE TABLE Preguntas (
    id INTEGER PRIMARY KEY NOT NULL,
    enunciado TEXT NOT NULL,
    nivel_id TEXT NOT NULL ,
    FOREIGN KEY (nivel_id) REFERENCES Nivel(id)
);

CREATE TABLE Respuestas (
    id INTEGER PRIMARY KEY NOT NULL,
    texto TEXT NOT NULL, 
    correcta INTEGER NOT NULL,
    pregunta_id TEXT NOT NULL,
    FOREIGN KEY (pregunta_id) REFERENCES Pregunta(id)
);

INSERT INTO Niveles (id, nombre, puntaje) VALUES
    (1, 'Facil', 10),
    (2, 'Medio', 20),
    (3, 'Dificil', 30),
    (4, 'Experto', 40);

INSERT INTO Preguntas (id, enunciado, nivel_id) VALUES
    (1, '¿Cuál es la función para imprimir en Python?', 1),
    (2, '¿Cómo se define una lista en Python?', 1),
    (3, '¿Qué operador se usa para sumar en Python?', 1),
    (4, '¿Cómo se indica un comentario en Python?', 1),
    (5, '¿Cómo se obtiene el largo de una lista en Python?', 1),
    (6, '¿Qué palabra clave se usa para definir una función en Python?', 1),
    (7, '¿Cómo se asigna un valor a una variable en Python?', 1),
    (8, '¿Qué tipo de dato es "True" en Python?', 1),
    (9, '¿Qué función se usa para convertir un entero a cadena en Python?', 1),
    (10, '¿Qué símbolo se usa para la división en Python?', 1),
    (11, '¿Qué función se usa para leer datos del usuario en Python?', 1),
    (12, '¿Cómo se concatena cadenas en Python?', 1),
    (13, '¿Qué palabra clave se usa para iniciar un bucle en Python?', 1),
    (14, '¿Cómo se escribe una condición en Python?', 1),
    (15, '¿Qué palabra clave se usa para importar una biblioteca en Python?', 1),
    (16, '¿Qué función se usa para redondear un número en Python?', 1),
    (17, '¿Cómo se obtiene el valor absoluto de un número en Python?', 1),
    (18, '¿Qué función se usa para encontrar el valor mínimo en una lista en Python?', 1),
    (19, '¿Qué función se usa para encontrar el valor máximo en una lista en Python?', 1),
    (20, '¿Cómo se crea un conjunto en Python?', 1),
    (21, '¿Qué operador se usa para la multiplicación en Python?', 1),
    (22, '¿Cómo se agrega un elemento a una lista en Python?', 1),
    (23, '¿Cómo se elimina un elemento de una lista en Python?', 1),
    (24, '¿Qué función se usa para ordenar una lista en Python?', 1),
    (25, '¿Qué palabra clave se usa para definir una clase en Python?', 1),
    (26, '¿Cómo se obtiene el tipo de una variable en Python?', 1),
    (27, '¿Qué operador se usa para la resta en Python?', 1),
    (28, '¿Cómo se convierte una cadena a entero en Python?', 1),
    (29, '¿Qué operador se usa para la comparación de igualdad en Python?', 1),
    (30, '¿Cómo se obtiene el módulo de una división en Python?', 1);

INSERT INTO Preguntas (id, enunciado, nivel_id) VALUES
    (31, '¿Qué es una tupla en Python?', 2),
    (32, '¿Cómo se crea un diccionario en Python?', 2),
    (33, '¿Cómo se define una función anónima en Python?', 2),
    (34, '¿Qué método se usa para agregar un elemento al final de una lista en Python?', 2),
    (35, '¿Cómo se convierte una cadena en un entero en Python?', 2),
    (36, '¿Qué palabra clave se usa para definir una clase en Python?', 2),
    (37, '¿Cómo se accede a un valor en un diccionario en Python?', 2),
    (38, '¿Qué método se usa para unir elementos de una lista en una cadena en Python?', 2),
    (39, '¿Cómo se invierte una lista en Python?', 2),
    (40, '¿Qué método se usa para obtener una subcadena en Python?', 2),
    (41, '¿Qué función se usa para obtener el tipo de una variable en Python?', 2),
    (42, '¿Cómo se eliminan espacios en blanco al inicio y final de una cadena en Python?', 2),
    (43, '¿Qué método se usa para ordenar una lista en Python?', 2),
    (44, '¿Qué palabra clave se usa para salir de un bucle en Python?', 2),
    (45, '¿Cómo se comprueba si un valor está en una lista en Python?', 2),
    (46, '¿Qué método se usa para copiar una lista en Python?', 2),
    (47, '¿Cómo se crean listas anidadas en Python?', 2),
    (48, '¿Qué es una comprensión de listas en Python?', 2),
    (49, '¿Cómo se maneja una excepción en Python?', 2),
    (50, '¿Cómo se usa el operador ternario en Python?', 2),
    (51, '¿Cómo se generan números aleatorios en Python?', 2),
    (52, '¿Cómo se obtiene la longitud de una cadena en Python?', 2),
    (53, '¿Qué método se usa para encontrar el índice de un elemento en una lista en Python?', 2),
    (54, '¿Cómo se usa la función zip() en Python?', 2),
    (55, '¿Cómo se define un diccionario con valores por defecto en Python?', 2),
    (56, '¿Qué método se usa para actualizar un diccionario en Python?', 2),
    (57, '¿Qué función se usa para obtener una lista de claves de un diccionario en Python?', 2),
    (58, '¿Cómo se elimina un par clave-valor de un diccionario en Python?', 2),
    (59, '¿Qué método se usa para combinar dos diccionarios en Python?', 2),
    (60, '¿Cómo se comprueba si una clave está en un diccionario en Python?', 2);

INSERT INTO Preguntas (id, enunciado, nivel_id) VALUES
    (61, '¿Qué es una comprensión de listas en Python?', 3),
    (62, '¿Cómo se maneja una excepción en Python?', 3),
    (63, '¿Qué es un generador en Python?', 3),
    (64, '¿Cómo se define una propiedad en una clase en Python?', 3),
    (65, '¿Qué es un decorador en Python?', 3),
    (66, '¿Cómo se serializa un objeto a JSON en Python?', 3),
    (67, '¿Qué es un módulo en Python?', 3),
    (68, '¿Cómo se define una función recursiva en Python?', 3),
    (69, '¿Qué es el manejo de contexto en Python?', 3),
    (70, '¿Qué es un iterador en Python?', 3),
    (71, '¿Cómo se usa la función map() en Python?', 3),
    (72, '¿Cómo se usa la función filter() en Python?', 3),
    (73, '¿Cómo se define una función lambda con múltiples parámetros en Python?', 3),
    (74, '¿Qué es un namespace en Python?', 3),
    (75, '¿Cómo se define una clase abstracta en Python?', 3),
    (76, '¿Cómo se usa el módulo itertools en Python?', 3),
    (77, '¿Cómo se define un método estático en Python?', 3),
    (78, '¿Qué es una metaclase en Python?', 3),
    (79, '¿Cómo se implementa la herencia múltiple en Python?', 3),
    (80, '¿Qué es un método de clase en Python?', 3),
    (81, '¿Cómo se usa la biblioteca logging en Python?', 3),
    (82, '¿Cómo se usa la función any() en Python?', 3),
    (83, '¿Cómo se usa la función all() en Python?', 3),
    (84, '¿Cómo se define una función que toma argumentos variables en Python?', 3),
    (85, '¿Cómo se usa la biblioteca datetime en Python?', 3),
    (86, '¿Qué es el duck typing en Python?', 3),
    (87, '¿Qué es el monkey patching en Python?', 3),
    (88, '¿Cómo se usa la biblioteca unittest en Python?', 3),
    (89, '¿Qué es el patrón singleton en Python?', 3),
    (90, '¿Qué es el GIL (Global Interpreter Lock) en Python?', 3);

INSERT INTO Preguntas (id, enunciado, nivel_id) VALUES
    (91, '¿Cómo se utiliza una clase en Python?', 4),
    (92, '¿Qué es un decorador en Python?', 4),
    (93, '¿Cómo se implementa un metaclase en Python?', 4),
    (94, '¿Qué es el duck typing en Python?', 4),
    (95, '¿Cómo se usa el patrón singleton en Python?', 4),
    (96, '¿Qué es el GIL (Global Interpreter Lock) en Python?', 4),
    (97, '¿Cómo se implementa un patrón de diseño en Python?', 4),
    (98, '¿Qué es un generador en Python?', 4),
    (99, '¿Cómo se utiliza la concurrencia en Python?', 4),
    (100, '¿Cómo se implementa una API en Python?', 4),
    (101, '¿Qué es la serialización en Python?', 4),
    (102, '¿Cómo se manejan las excepciones en Python?', 4),
    (103, '¿Qué es una expresión lambda en Python?', 4),
    (104, '¿Cómo se utiliza una lista por comprensión en Python?', 4),
    (105, '¿Qué es una función de orden superior en Python?', 4),
    (106, '¿Cómo se implementa un patrón de diseño singleton en Python?', 4),
    (107, '¿Cómo se usa la biblioteca functools en Python?', 4),
    (108, '¿Qué es el memoization en Python?', 4),
    (109, '¿Cómo se maneja la memoria en Python?', 4),
    (110, '¿Qué es el monkey patching en Python?', 4),
    (111, '¿Cómo se utiliza la biblioteca asyncio en Python?', 4),
    (112, '¿Qué es la metaprogramación en Python?', 4),
    (113, '¿Cómo se implementa un contexto en Python?', 4),
    (114, '¿Qué es una función generadora en Python?', 4),
    (115, '¿Cómo se utiliza la biblioteca threading en Python?', 4),
    (116, '¿Qué es el multiprocessing en Python?', 4),
    (117, '¿Cómo se implementa una clase abstracta en Python?', 4),
    (118, '¿Qué es el pickling en Python?', 4),
    (119, '¿Cómo se maneja la serialización en Python?', 4),
    (120, '¿Cómo se implementa un protocolo en Python?', 4);

INSERT INTO Respuestas (id, texto, correcta, pregunta_id) VALUES
    (1, 'print()', 1, 1),
    (2, 'echo()', 0, 1),
    (3, 'printf()', 0, 1),
    (4, 'println()', 0, 1),
    (5, '[1, 2, 3]', 1, 2),
    (6, '{1, 2, 3}', 0, 2),
    (7, '(1, 2, 3)', 0, 2),
    (8, '<1, 2, 3>', 0, 2),
    (9, '+', 1, 3),
    (10, '-', 0, 3),
    (11, '*', 0, 3),
    (12, '/', 0, 3),
    (13, '#', 1, 4),
    (14, '//', 0, 4),
    (15, '/*', 0, 4),
    (16, '!', 0, 4),
    (17, 'len()', 1, 5),
    (18, 'length()', 0, 5),
    (19, 'count()', 0, 5),
    (20, 'size()', 0, 5),
    (21, 'def', 1, 6),
    (22, 'function', 0, 6),
    (23, 'fn', 0, 6),
    (24, 'func', 0, 6),
    (25, '=', 1, 7),
    (26, ':', 0, 7),
    (27, '==', 0, 7),
    (28, '->', 0, 7),
    (29, 'Boolean', 1, 8),
    (30, 'String', 0, 8),
    (31, 'Integer', 0, 8),
    (32, 'Float', 0, 8),
    (33, 'str()', 1, 9),
    (34, 'int()', 0, 9),
    (35, 'float()', 0, 9),
    (36, 'bool()', 0, 9),
    (37, '/', 1, 10),
    (38, '*', 0, 10),
    (39, '-', 0, 10),
    (40, '+', 0, 10),
    (41, 'input()', 1, 11),
    (42, 'read()', 0, 11),
    (43, 'scan()', 0, 11),
    (44, 'gets()', 0, 11),
    (45, '+', 1, 12),
    (46, '&', 0, 12),
    (47, 'concat', 0, 12),
    (48, 'join', 0, 12),
    (49, 'for', 1, 13),
    (50, 'while', 0, 13),
    (51, 'do', 0, 13),
    (52, 'foreach', 0, 13),
    (53, 'if', 1, 14),
    (54, 'when', 0, 14),
    (55, 'case', 0, 14),
    (56, 'switch', 0, 14),
    (57, 'import', 1, 15),
    (58, 'include', 0, 15),
    (59, 'require', 0, 15),
    (60, 'using', 0, 15),
    (61, 'round()', 1, 16),
    (62, 'ceil()', 0, 16),
    (63, 'floor()', 0, 16),
    (64, 'truncate()', 0, 16),
    (65, 'abs()', 1, 17),
    (66, 'absolute()', 0, 17),
    (67, 'fabs()', 0, 17),
    (68, 'positive()', 0, 17),
    (69, 'min()', 1, 18),
    (70, 'minimum()', 0, 18),
    (71, 'least()', 0, 18),
    (72, 'smallest()', 0, 18),
    (73, 'max()', 1, 19),
    (74, 'maximum()', 0, 19),
    (75, 'greatest()', 0, 19),
    (76, 'largest()', 0, 19),
    (77, 'set()', 1, 20),
    (78, 'list()', 0, 20),
    (79, 'tuple()', 0, 20),
    (80, 'dict()', 0, 20),
    (81, '*', 1, 21),
    (82, 'x', 0, 21),
    (83, '.', 0, 21),
    (84, '/', 0, 21),
    (85, 'append()', 1, 22),
    (86, 'add()', 0, 22),
    (87, 'insert()', 0, 22),
    (88, 'extend()', 0, 22),
    (89, 'remove()', 1, 23),
    (90, 'delete()', 0, 23),
    (91, 'pop()', 0, 23),
    (92, 'discard()', 0, 23),
    (93, 'sort()', 1, 24),
    (94, 'order()', 0, 24),
    (95, 'arrange()', 0, 24),
    (96, 'sequence()', 0, 24),
    (97, 'class', 1, 25),
    (98, 'object', 0, 25),
    (99, 'type', 0, 25),
    (100, 'category', 0, 25),
    (101, 'type()', 1, 26),
    (102, 'class()', 0, 26),
    (103, 'kind()', 0, 26),
    (104, 'form()', 0, 26),
    (105, '-', 1, 27),
    (106, '/', 0, 27),
    (107, '+', 0, 27),
    (108, '*', 0, 27),
    (109, 'int()', 1, 28),
    (110, 'str()', 0, 28),
    (111, 'float()', 0, 28),
    (112, 'bool()', 0, 28),
    (113, '==', 1, 29),
    (114, '=', 0, 29),
    (115, '!=', 0, 29),
    (116, '<>', 0, 29),
    (117, '%', 1, 30),
    (118, '/', 0, 30),
    (119, '*', 0, 30),
    (120, '-', 0, 30);

INSERT INTO Respuestas (id, texto, correcta, pregunta_id) VALUES
    (121, 'Una colección ordenada e inmutable', 1, 31),
    (122, 'Una colección desordenada y mutable', 0, 31),
    (123, 'Una colección ordenada y mutable', 0, 31),
    (124, 'Una colección desordenada e inmutable', 0, 31),
    (125, '{"clave": "valor"}', 1, 32),
    (126, '["clave", "valor"]', 0, 32),
    (127, '("clave", "valor")', 0, 32),
    (128, '{"clave", "valor"}', 0, 32),
    (129, 'lambda', 1, 33),
    (130, 'func', 0, 33),
    (131, 'def', 0, 33),
    (132, 'anon', 0, 33),
    (133, 'append()', 1, 34),
    (134, 'insert()', 0, 34),
    (135, 'extend()', 0, 34),
    (136, 'add()', 0, 34),
    (137, 'int()', 1, 35),
    (138, 'str()', 0, 35),
    (139, 'float()', 0, 35),
    (140, 'bool()', 0, 35),
    (141, 'class', 1, 36),
    (142, 'object', 0, 36),
    (143, 'type', 0, 36),
    (144, 'module', 0, 36),
    (145, 'diccionario[clave]', 1, 37),
    (146, 'diccionario.clave', 0, 37),
    (147, 'diccionario(clave)', 0, 37),
    (148, 'diccionario{clave}', 0, 37),
    (149, 'join()', 1, 38),
    (150, 'concatenate()', 0, 38),
    (151, 'combine()', 0, 38),
    (152, 'merge()', 0, 38),
    (153, 'reverse()', 1, 39),
    (154, 'invert()', 0, 39),
    (155, 'flip()', 0, 39),
    (156, 'backwards()', 0, 39),
    (157, 'slice()', 1, 40),
    (158, 'sub()', 0, 40),
    (159, 'segment()', 0, 40),
    (160, 'part()', 0, 40),
    (161, 'len()', 1, 41),
    (162, 'length()', 0, 41),
    (163, 'size()', 0, 41),
    (164, 'count()', 0, 41),
    (165, 'strip()', 1, 42),
    (166, 'trim()', 0, 42),
    (167, 'srt()', 0, 42),
    (168, 'exclude()', 0, 42),
    (169, 'sort()', 1, 43),
    (170, 'srt()', 0, 43),
    (171, 'sorting()', 0, 43),
    (172, 'toSort()', 0, 43),
    (173, 'break', 1, 44),
    (174, 'continue', 0, 44),
    (175, 'pass', 0, 44),
    (176, 'return', 0, 44),
    (177, 'in', 1, 45),
    (178, 'within', 0, 45),
    (179, 'inside', 0, 45),
    (180, 'contains', 0, 45),
    (181, 'copy()', 1, 46),
    (182, 'splice()', 0, 46),
    (183, 'list()', 0, 46),
    (184, 'index()', 0, 46),
    (185, 'Creas una lista dentro de otra lista', 1, 47),
    (186, 'No se puede', 0, 47),
    (187, 'con el método combine()', 0, 47),
    (188, '¿qué es una lista?', 0, 47),
    (189, 'Es una funcionalidad que nos permite crear una lista avanzada en una sola línea de código: lista = [letra for letra in abcdario]', 1, 48),
    (190, 'Es comprender como funcionan las listas', 0, 48),
    (191, 'Es un paquete externo que permite crear listas comprensivas', 0, 48),
    (192, 'No sé', 0, 48),
    (193, 'try y except', 1, 49),
    (194, 'try y catch', 0, 49),
    (195, 'try y error', 0, 49),
    (196, 'just try', 0, 49),
    (197, 'condición_if_true if condición else condición_if_false', 1, 50),
    (198, 'if condición: condición_if_true elif condición_if_false', 0, 50),
    (199, 'if condición: condición_if_true or condición_if_false', 0, 50),
    (200, 'condición_if_true if condición and condición_if_false', 0, 50),
    (201, 'import random', 1, 51),
    (202, 'import random_number', 0, 51),
    (203, 'randomize()', 0, 51),
    (204, 'generate()', 0, 51),
    (205, 'len()', 1, 52),
    (206, 'length()', 0, 52),
    (207, 'size()', 0, 52),
    (208, 'count()', 0, 52),
    (209, 'index()', 1, 53),
    (210, 'find()', 0, 53),
    (211, 'search()', 0, 53),
    (212, 'locate()', 0, 53),
    (213, 'para combinar dos o más listas en una serie de tuplas', 1, 54),
    (214, 'para ordenar una lista', 0, 54),
    (215, 'para filtrar elementos de una lista', 0, 54),
    (216, 'para dividir una lista en sublistas', 0, 54),
    (217, 'usando defaultdict del módulo collections', 1, 55),
    (218, 'usando dictdefault del módulo collections', 0, 55),
    (219, 'usando defaultdict del módulo dict', 0, 55),
    (220, 'usando dictdefault del módulo dict', 0, 55),
    (221, 'update()', 1, 56),
    (222, 'modify()', 0, 56),
    (223, 'change()', 0, 56),
    (224, 'edit()', 0, 56),
    (225, 'keys()', 1, 57),
    (226, 'get_keys()', 0, 57),
    (227, 'all_keys()', 0, 57),
    (228, 'list_keys()', 0, 57),
    (229, 'del', 1, 58),
    (230, 'remove', 0, 58),
    (231, 'delete', 0, 58),
    (232, 'discard', 0, 58),
    (233, 'update()', 1, 59),
    (234, 'merge()', 0, 59),
    (235, 'combine()', 0, 59),
    (236, 'join()', 0, 59),
    (237, 'in', 1, 60),
    (238, 'exists', 0, 60),
    (239, 'contains', 0, 60),
    (240, 'has_key', 0, 60);


INSERT INTO Respuestas (id, texto, correcta, pregunta_id) VALUES
    (241, '[x for x in iterable]', 1, 61),
    (242, '[x * 2 for x in iterable]', 0, 61),
    (243, '[x if condition]', 0, 61),
    (244, '{x: x**2 for x in iterable}', 0, 61),
    (245, 'try y except', 1, 62),
    (246, 'try y catch', 0, 62),
    (247, 'try y finally', 0, 62),
    (248, 'try y error', 0, 62),
    (249, 'Una función que devuelve un iterador y utiliza la palabra clave yield', 1, 63),
    (250, 'Una técnica para manejar excepciones', 0, 63),
    (251, 'Una estructura de datos mutable', 0, 63),
    (252, 'Un método para acceder a bases de datos', 0, 63),
    (253, 'Usando el decorador @property', 1, 64),
    (254, 'Usando la palabra clave property', 0, 64),
    (255, 'Definiendo una función lambda', 0, 64),
    (256, 'Usando la palabra clave prop', 0, 64),
    (257, 'Una función que modifica el comportamiento de otra función', 1, 65),
    (258, 'Una palabra clave para definir una clase', 0, 65),
    (259, 'Una técnica para manejar excepciones', 0, 65),
    (260, 'Una estructura de datos mutable', 0, 65),
    (261, 'Usando la función json.dumps()', 1, 66),
    (262, 'Usando la función json.loads()', 0, 66),
    (263, 'Usando la función json.dump()', 0, 66),
    (264, 'Usando la función json.load()', 0, 66),
    (265, 'Un archivo que contiene definiciones y declaraciones de Python', 1, 67),
    (266, 'Una técnica para manejar excepciones', 0, 67),
    (267, 'Una estructura de datos mutable', 0, 67),
    (268, 'Un método para acceder a bases de datos', 0, 67),
    (269, 'Definiendo una función que se llama a sí misma', 1, 68),
    (270, 'Usando la palabra clave recur', 0, 68),
    (271, 'Definiendo una función lambda', 0, 68),
    (272, 'Usando la palabra clave loop', 0, 68),
    (273, 'Una técnica que permite la gestión de recursos de manera eficiente utilizando las palabras clave with y as', 1, 69),
    (274, 'Una técnica para manejar excepciones', 0, 69),
    (275, 'Una estructura de datos mutable', 0, 69),
    (276, 'Un método para acceder a bases de datos', 0, 69),
    (277, 'Un objeto que contiene un número contable de valores y puede ser iterado', 1, 70),
    (278, 'Una técnica para manejar excepciones', 0, 70),
    (279, 'Una estructura de datos mutable', 0, 70),
    (280, 'Un método para acceder a bases de datos', 0, 70),
    (281, 'Aplicando una función a todos los elementos de una lista', 1, 71),
    (282, 'Filtrando elementos de una lista', 0, 71),
    (283, 'Ordenando una lista', 0, 71),
    (284, 'Encontrando el índice de un elemento en una lista', 0, 71),
    (285, 'Filtrando elementos de una lista que cumplen una condición', 1, 72),
    (286, 'Aplicando una función a todos los elementos de una lista', 0, 72),
    (287, 'Ordenando una lista', 0, 72),
    (288, 'Encontrando el índice de un elemento en una lista', 0, 72),
    (289, 'lambda x, y: x + y', 1, 73),
    (290, 'lambda (x, y): x + y', 0, 73),
    (291, 'lambda [x, y]: x + y', 0, 73),
    (292, 'lambda {x, y}: x + y', 0, 73),
    (293, 'Un espacio de nombres que contiene todas las definiciones de nombres de un módulo', 1, 74),
    (294, 'Una técnica para manejar excepciones', 0, 74),
    (295, 'Una estructura de datos mutable', 0, 74),
    (296, 'Un método para acceder a bases de datos', 0, 74),
    (297, 'Usando la biblioteca abc y decorando métodos con @abstractmethod', 1, 75),
    (298, 'Usando la palabra clave abstract', 0, 75),
    (299, 'Implementando una función lambda', 0, 75),
    (300, 'Usando la palabra clave class', 0, 75),
    (301, 'Proporciona herramientas para la iteración eficiente sobre datos', 1, 76),
    (302, 'Filtra elementos de una lista', 0, 76),
    (303, 'Ordena una lista', 0, 76),
    (304, 'Encuentra el índice de un elemento en una lista', 0, 76),
    (305, 'Usando el decorador @staticmethod', 1, 77),
    (306, 'Usando la palabra clave static', 0, 77),
    (307, 'Definiendo una función lambda', 0, 77),
    (308, 'Usando la palabra clave method', 0, 77),
    (309, 'Una clase que define el comportamiento de otras clases', 1, 78),
    (310, 'Una técnica para manejar excepciones', 0, 78),
    (311, 'Una estructura de datos mutable', 0, 78),
    (312, 'Un método para acceder a bases de datos', 0, 78),
    (313, 'Definiendo una clase que herede de múltiples clases', 1, 79),
    (314, 'Usando la palabra clave multiple', 0, 79),
    (315, 'Implementando una función lambda', 0, 79),
    (316, 'Usando la palabra clave inherit', 0, 79),
    (317, 'Un método que recibe la clase como primer argumento y se define con el decorador @classmethod', 1, 80),
    (318, 'Un método que recibe una instancia como primer argumento y se define con el decorador @classmethod', 0, 80),
    (319, 'Un método que se define fuera de la clase', 0, 80),
    (320, 'Un método que se define con la palabra clave classmethod', 0, 80),
    (321, 'Usando funciones como logging.debug(), logging.info(), logging.warning(), logging.error()', 1, 81),
    (322, 'Usando funciones como log.debug(), log.info(), log.warn(), log.error()', 0, 81),
    (323, 'Usando funciones como debug(), info(), warn(), error()', 0, 81),
    (324, 'Usando funciones como log.debug(), log.info(), log.warning(), log.error()', 0, 81),
    (325, 'Retorna True si al menos uno de los elementos en un iterable es verdadero', 1, 82),
    (326, 'Retorna True si todos los elementos en un iterable son verdaderos', 0, 82),
    (327, 'Retorna True si ningún elemento en un iterable es verdadero', 0, 82),
    (328, 'Retorna True si el iterable está vacío', 0, 82),
    (329, 'Retorna True si todos los elementos en un iterable son verdaderos', 1, 83),
    (330, 'Retorna True si al menos uno de los elementos en un iterable es verdadero', 0, 83),
    (331, 'Retorna True si ningún elemento en un iterable es verdadero', 0, 83),
    (332, 'Retorna True si el iterable está vacío', 0, 83),
    (333, 'Usando *args para argumentos variables y **kwargs para argumentos clave-valor variables', 1, 84),
    (334, 'Usando varargs para argumentos variables y kwargs para argumentos clave-valor variables', 0, 84),
    (335, 'Usando args* para argumentos variables y kwargs** para argumentos clave-valor variables', 0, 84),
    (336, 'Usando var* para argumentos variables y kwvar** para argumentos clave-valor variables', 0, 84),
    (337, 'Importando el módulo datetime y usando clases como datetime.datetime, datetime.date, datetime.time', 1, 85),
    (338, 'Importando el módulo time y usando clases como time.datetime, time.date, time.time', 0, 85),
    (339, 'Importando el módulo date y usando clases como date.datetime, date.date, date.time', 0, 85),
    (340, 'Importando el módulo calendar y usando clases como calendar.datetime, calendar.date, calendar.time', 0, 85),
    (341, 'Una forma de determinar el tipo de un objeto por sus métodos y propiedades en lugar de por su clase', 1, 86),
    (342, 'Una técnica para convertir tipos de datos', 0, 86),
    (343, 'Una palabra clave para definir funciones anónimas', 0, 86),
    (344, 'Una manera de manejar excepciones', 0, 86),
    (345, 'Una técnica para modificar o extender el código en tiempo de ejecución', 1, 87),
    (346, 'Una técnica para manejar excepciones', 0, 87),
    (347, 'Una estructura de datos mutable', 0, 87),
    (348, 'Un método para acceder a bases de datos', 0, 87),
    (349, 'Importando unittest y creando clases que heredan de unittest.TestCase', 1, 88),
    (350, 'Importando test y creando clases que heredan de test.TestCase', 0, 88),
    (351, 'Importando unittest y creando clases que heredan de unittest.Test', 0, 88),
    (352, 'Importando testunit y creando clases que heredan de testunit.TestCase', 0, 88),
    (353, 'Un patrón de diseño que restringe la creación de una clase a una sola instancia', 1, 89),
    (354, 'Un patrón de diseño que permite múltiples instancias de una clase', 0, 89),
    (355, 'Un patrón de diseño que define una interfaz para crear objetos', 0, 89),
    (356, 'Un patrón de diseño que permite la creación de objetos complejos', 0, 89),
    (357, 'Un mecanismo que permite que solo un hilo ejecute código Python a la vez', 1, 90),
    (358, 'Una técnica para manejar excepciones', 0, 90),
    (359, 'Una estructura de datos mutable', 0, 90),
    (360, 'Un método para acceder a bases de datos', 0, 90);

INSERT INTO Respuestas (id, texto, correcta, pregunta_id) VALUES
    (361, 'Se crea una instancia de la clase usando el nombre de la clase seguido de paréntesis.', 1, 91),
    (362, 'Se define la clase usando la palabra clave class.', 0, 91),
    (363, 'Se llama al método __init__.', 0, 91),
    (364, 'Se accede a los atributos y métodos de la instancia usando el operador punto.', 0, 91),
    (365, 'Una función que modifica el comportamiento de otra función.', 1, 92),
    (366, 'Una palabra clave para definir una clase.', 0, 92),
    (367, 'Una técnica para manejar excepciones.', 0, 92),
    (368, 'Una estructura de datos mutable.', 0, 92),
    (369, 'Definiendo una clase que herede de type.', 1, 93),
    (370, 'Usando la palabra clave meta.', 0, 93),
    (371, 'Definiendo una clase dentro de otra clase.', 0, 93),
    (372, 'Implementando una función lambda.', 0, 93),
    (373, 'Una forma de determinar el tipo de un objeto por sus métodos y propiedades en lugar de por su clase.', 1, 94),
    (374, 'Una técnica para convertir tipos de datos.', 0, 94),
    (375, 'Una palabra clave para definir funciones anónimas.', 0, 94),
    (376, 'Una manera de manejar excepciones.', 0, 94),
    (377, 'Creando una clase con un método que retorne siempre la misma instancia.', 1, 95),
    (378, 'Usando la palabra clave singleton.', 0, 95),
    (379, 'Definiendo la clase con la palabra clave single.', 0, 95),
    (380, 'Implementando una función global.', 0, 95),
    (381, 'Un mecanismo que permite que solo un hilo ejecute código Python a la vez.', 1, 96),
    (382, 'Una técnica para manejar excepciones.', 0, 96),
    (383, 'Una estructura de datos mutable.', 0, 96),
    (384, 'Un método para acceder a bases de datos.', 0, 96),
    (385, 'Definiendo clases y métodos que sigan el patrón deseado.', 1, 97),
    (386, 'Usando la palabra clave design.', 0, 97),
    (387, 'Implementando una función lambda.', 0, 97),
    (388, 'Usando la palabra clave pattern.', 0, 97),
    (389, 'Una función que retorna un iterador y se utiliza con la palabra clave yield.', 1, 98),
    (390, 'Una técnica para manejar excepciones.', 0, 98),
    (391, 'Una estructura de datos mutable.', 0, 98),
    (392, 'Un método para acceder a bases de datos.', 0, 98),
    (393, 'Usando módulos como threading o asyncio.', 1, 99),
    (394, 'Definiendo funciones con la palabra clave concurrent.', 0, 99),
    (395, 'Implementando una función lambda.', 0, 99),
    (396, 'Usando la palabra clave sync.', 0, 99),
    (397, 'Usando frameworks como Flask o Django.', 1, 100),
    (398, 'Implementando funciones globales.', 0, 100),
    (399, 'Definiendo clases con la palabra clave api.', 0, 100),
    (400, 'Usando la palabra clave endpoint.', 0, 100),
    (401, 'El proceso de convertir un objeto en una cadena de bytes.', 1, 101),
    (402, 'Una técnica para manejar excepciones.', 0, 101),
    (403, 'Una estructura de datos mutable.', 0, 101),
    (404, 'Un método para acceder a bases de datos.', 0, 101),
    (405, 'Usando las palabras clave try y except.', 1, 102),
    (406, 'Definiendo funciones con la palabra clave exception.', 0, 102),
    (407, 'Implementando una función lambda.', 0, 102),
    (408, 'Usando la palabra clave error.', 0, 102),
    (409, 'Una función anónima definida con la palabra clave lambda.', 1, 103),
    (410, 'Una técnica para manejar excepciones.', 0, 103),
    (411, 'Una estructura de datos mutable.', 0, 103),
    (412, 'Un método para acceder a bases de datos.', 0, 103),
    (413, 'Usando la sintaxis [expresión for elemento in iterable].', 1, 104),
    (414, 'Definiendo la lista con la palabra clave listcomp.', 0, 104),
    (415, 'Implementando una función lambda.', 0, 104),
    (416, 'Usando la palabra clave comprehension.', 0, 104),
    (417, 'Una función que toma otra función como argumento o retorna una función.', 1, 105),
    (418, 'Una técnica para manejar excepciones.', 0, 105),
    (419, 'Una estructura de datos mutable.', 0, 105),
    (420, 'Un método para acceder a bases de datos.', 0, 105),
    (421, 'Creando una clase con un método que retorne siempre la misma instancia.', 1, 106),
    (422, 'Usando la palabra clave singleton.', 0, 106),
    (423, 'Definiendo la clase con la palabra clave single.', 0, 106),
    (424, 'Implementando una función global.', 0, 106),
    (425, 'Importando functools y usando sus funciones, como lru_cache y partial.', 1, 107),
    (426, 'Definiendo funciones con la palabra clave functools.', 0, 107),
    (427, 'Implementando funciones lambda.', 0, 107),
    (428, 'Usando la palabra clave tools.', 0, 107),
    (429, 'Una técnica de optimización que guarda los resultados de funciones para reutilizarlos.', 1, 108),
    (430, 'Una técnica para manejar excepciones.', 0, 108),
    (431, 'Una estructura de datos mutable.', 0, 108),
    (432, 'Un método para acceder a bases de datos.', 0, 108),
    (433, 'El intérprete de Python gestiona automáticamente la memoria a través de la recolección de basura.', 1, 109),
    (434, 'Definiendo funciones con la palabra clave memory.', 0, 109),
    (435, 'Implementando funciones lambda.', 0, 109),
    (436, 'Usando la palabra clave memory.', 0, 109),
    (437, 'Una técnica para modificar o extender el código en tiempo de ejecución.', 1, 110),
    (438, 'Una técnica para manejar excepciones.', 0, 110),
    (439, 'Una estructura de datos mutable.', 0, 110),
    (440, 'Un método para acceder a bases de datos.', 0, 110),
    (441, 'Usando funciones como async y await para escribir código concurrente.', 1, 111),
    (442, 'Definiendo funciones con la palabra clave asyncio.', 0, 111),
    (443, 'Implementando funciones lambda.', 0, 111),
    (444, 'Usando la palabra clave concurrent.', 0, 111),
    (445, 'Una técnica que permite que los programas traten a otros programas como sus datos.', 1, 112),
    (446, 'Una técnica para manejar excepciones.', 0, 112),
    (447, 'Una estructura de datos mutable.', 0, 112),
    (448, 'Un método para acceder a bases de datos.', 0, 112),
    (449, 'Usando la palabra clave with y definiendo métodos __enter__ y __exit__.', 1, 113),
    (450, 'Definiendo funciones con la palabra clave context.', 0, 113),
    (451, 'Implementando funciones lambda.', 0, 113),
    (452, 'Usando la palabra clave context.', 0, 113),
    (453, 'Una función que retorna un iterador y se utiliza con la palabra clave yield.', 1, 114),
    (454, 'Una técnica para manejar excepciones.', 0, 114),
    (455, 'Una estructura de datos mutable.', 0, 114),
    (456, 'Un método para acceder a bases de datos.', 0, 114),
    (457, 'Creando y manejando hilos usando la clase Thread del módulo threading.', 1, 115),
    (458, 'Definiendo funciones con la palabra clave threading.', 0, 115),
    (459, 'Implementando funciones lambda.', 0, 115),
    (460, 'Usando la palabra clave thread.', 0, 115),
    (461, 'Una técnica que permite la ejecución de tareas en paralelo usando múltiples procesos.', 1, 116),
    (462, 'Una técnica para manejar excepciones.', 0, 116),
    (463, 'Una estructura de datos mutable.', 0, 116),
    (464, 'Un método para acceder a bases de datos.', 0, 116),
    (465, 'Usando la biblioteca abc y decorando métodos con @abstractmethod.', 1, 117),
    (466, 'Definiendo funciones con la palabra clave abstract.', 0, 117),
    (467, 'Implementando funciones lambda.', 0, 117),
    (468, 'Usando la palabra clave class.', 0, 117),
    (469, 'El proceso de serializar un objeto en un formato que puede ser almacenado o transmitido.', 1, 118),
    (470, 'Una técnica para manejar excepciones.', 0, 118),
    (471, 'Una estructura de datos mutable.', 0, 118),
    (472, 'Un método para acceder a bases de datos.', 0, 118),
    (473, 'Usando el módulo pickle para convertir objetos a una cadena de bytes y viceversa.', 1, 119),
    (474, 'Definiendo funciones con la palabra clave serialize.', 0, 119),
    (475, 'Implementando funciones lambda.', 0, 119),
    (476, 'Usando la palabra clave serialize.', 0, 119),
    (477, 'Definiendo una interfaz con métodos que las clases deben implementar.', 1, 120),
    (478, 'Usando la palabra clave protocol.', 0, 120),
    (479, 'Definiendo funciones con la palabra clave interface.', 0, 120),
    (480, 'Implementando funciones lambda.', 0, 120);

COMMIT;
